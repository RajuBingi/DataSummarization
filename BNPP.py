#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 10 17:53:08 2019

@author: rajubingi
"""


import pandas as pd
import numpy as np
import os
from util import getCleansingNames, getListCount, flattened
from matplotlib import pyplot as plt

def BNPP1(inputfile):

###########################################################################################################################
# This Program reads the CSV file and generate the CSV file with three columns as per the document                         #
# If input CSV file has errors then it prompts user   "Do you want to replace NULLs with 'No Name' string (y/n)"          #                                                                                           #   
# If user says yes then program process the records by replacing NULL values with 'No Name' string                        #  
# If user says No then it captures the errors with row numbers into  error_ouput.csv and does not generate the CSV file    #      
#                                                                                                                         #  
###########################################################################################################################
    
    
    if os.path.exists("outputfile/error_ouput.csv")  :      
          os.remove("outputfile/error_ouput.csv")

    if os.path.exists("outputfile/final_ouput.csv")  :      
          os.remove("outputfile/final_ouput.csv")
    
    # Reading Data from CSV 
    df = pd.read_csv(inputfile, names=["time","message_identifier","sender","recipients","topic","mode"])
    
    source_records_count = df['time'].count()
    
    
    
    UI = input("Do you want to replace NULLs with 'No Name' string (y/n) : ") 
    
    if (UI == 'y' or  UI == 'Y'):
        # Replace Nulls with String
        df1 = df.replace(np.nan, 'No Name', regex=True)
    else:
        df1 = df
    
    
    #Cleaning senders names and count of sent emails by person
    senders_list = getCleansingNames (list(df1['sender']),'Y')
    
    senders_list_count = getListCount(senders_list[0])
    
    #Any errors generated by function
    senders_error_list =senders_list[1]
    
    # Creating DF with Senders
    senders_df = pd.DataFrame(senders_list_count, columns=['Person','Sent'])
    
    senders_df = pd.DataFrame(senders_list_count, columns=['Person','Sent'])
    
    
    #Cleaning Recipients names and count of  received emails by person
    recipients_list = getCleansingNames (list(df1['recipients']),'Y')
    
    
    
    recipients_list_count = getListCount(recipients_list[0])
    
    #Any errors generated by function
    recipients_error_list = recipients_list[1]
    
    # Creating DF with Recipients
    recipients_df = pd.DataFrame(recipients_list_count, columns=['Person','Recieved'])
    
    
    
    # Full Outer join of DF
    df_merge = pd.merge(senders_df,recipients_df,how='outer',on=['Person'])
    
    # Replacing NULLs with zero
    final_df= df_merge.replace(np.nan, 0, regex=True)
    
    #Sorting by number of emails sent
    final_df.sort_values(by=['Sent'], inplace=True, ascending=False)
    #print (final_df)
    
    
    final_df_count = final_df['Sent'].sum()
    
    
    
    if (source_records_count == final_df_count):
        #saving DF into File
        final_df.to_csv("outputfile/final_ouput.csv", index = False)   
    else:
       error_list = list(set(senders_error_list + recipients_error_list ))
       #print(error_list)
       
       error_record = []
       for row in error_list:
         error_record = df.iloc[[row-1],[0,1,2,3,4,5]]
         print(error_record)
        
         if not os.path.exists("outputfile/error_ouput.csv") :
           error = []
           df_file = pd.DataFrame(error, columns=["time","message_identifier","sender","recipients","topic","mode"])
           df_file.to_csv("outputfile/error_ouput.csv",index=False)
           
           error_record.to_csv("outputfile/error_ouput.csv", header=False, mode='a') 
         else:
           error_record.to_csv("outputfile/error_ouput.csv",header=False,  mode='a')
         
       
       
       print('records need to be coprrected. Please check th error file')
    
    return 0 if os.path.exists("outputfile/final_ouput.csv") else 1

def BNPP2(inputfile):
   
    # Reading Source file
    df = pd.read_csv(inputfile, names=["time","message_identifier","sender","recipients","topic","mode"])
    
    # Reading CSV file
    df1 = pd.read_csv("outputfile/final_ouput.csv")
    
    # find top 5 persons
    top5senders = df1['Person'].head(5)
    
    #print (top5senders)
    
    
    #handling null values
    df2 = df.replace(np.nan, 'No Name', regex=True)
    
    # Cleaning sender Names            
    df2['person']  = getCleansingNames((df2['sender']),'Y')[0]
    
    #Cleaning Time
    df2['date'] = pd.to_datetime(df2['time'], unit='ms').dt.strftime('%Y-%m') 
    
    # Cleansed Receipents List
    df2['cleanedRecip']  = df2.apply(lambda row : getCleansingNames(row['recipients'],'N')[0], axis=1)
    
    
    
    ##############################################  Visualization 1  ###############################
    # selecting only Date and person name
    df3 = df2[["date","person"]]
    
    # Extracting top 5 persons 
    df3 = df3[df3['person'].isin(top5senders)]
    
    
    
    # Calulating count of emails sent by person month wise
    df4 = pd.DataFrame({'count' : df3.groupby( [ "date"] ).size()}).reset_index()
    
    # sort by year and month
    df4.sort_values(by=['date'], inplace=True, ascending=False)
    
    #print (df4)
    
    x = (list(df4['date'].head(5)))
    y = list(df4['count'].head(5))
    
    #z = list(final_df['Recieved'].head(5))
    plt.plot(x[::-1],y[::-1])
    #plt.plot(x,z,'o')
    plt.title("Number of emails sent in last 5 months by top5 senders ")
    plt.xlabel("Year and Month")
    plt.ylabel("Number of emails")
               
    plt.legend(["Sent"])
    plt.show()
    
    
    
    #################################################### Visualization 2  ##########################
    
    # selecting only Date and person name
    df5 = df2[["date","person","cleanedRecip"]]
    
    
    
    df6 = pd.DataFrame()
    for person in  top5senders:
      
      df6 = df6.append(df5[df5['cleanedRecip'].apply(lambda x: person in x)])
    
    df7 = pd.DataFrame({'senderslist' : df6.groupby([ "date"])["person"].apply(list)}).reset_index()
    
    df7['uniqsenderscount'] =  df7.apply(lambda row : len(set(flattened(row['senderslist']))), axis=1) 
    
    # sort by year and month
    df7.sort_values(by=['date'], inplace=True, ascending=False)
    
    
    
    x = (list(df7['date'].head(5)))
    y = list(df7['uniqsenderscount'].head(5))
    
    #z = list(final_df['Recieved'].head(5))
    plt.plot(x[::-1],y[::-1])
    #plt.plot(x,z,'o')
    plt.title("Top5 senders contacted by Number of Unique people for last 5 months ")
    plt.xlabel("Year and Month")
    plt.ylabel("Number of unique people")
               
    plt.legend(["Persons"])
    plt.show()
    
    
    return 0